def multiply(a,b):return a*b
def divide(a,b): return a/b
class calc:pass


class Hero:
    def say_hello(self):
        print("–ü—Ä–∏–≤—ñ—Ç! –Ø –≥–µ—Ä–æ–π!")

h = Hero()
h.say_hello()  # –¶–µ –≤–∏–∫–ª–∏–∫–∞—î –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –æ–±'—î–∫—Ç h

print("Hello!") # –ü–ï–†–ï–í–Ü–†–ö–ê –î–õ–Ø Git

#–°–¢–í–û–†–ï–ù–ù–Ø –ö–õ–ê–°–£
class Car:
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É
    def __init__(self, brand, model, year, motor):
        self.brand = brand  # –ê—Ç—Ä–∏–±—É—Ç –æ–±'—î–∫—Ç–∞
        self.model = model  # –ê—Ç—Ä–∏–±—É—Ç –æ–±'—î–∫—Ç–∞
        self.year = year    # –ê—Ç—Ä–∏–±—É—Ç –æ–±'—î–∫—Ç–∞
        self.motor = motor  # –ê—Ç—Ä–∏–±—É—Ç –æ–±'—î–∫—Ç–∞

    # –ú–µ—Ç–æ–¥ –∫–ª–∞—Å—É
    def display_info(self):
        print(f"{self.year} {self.brand} {self.model} {self.motor}")


my_car = Car("Toyota", "Corolla", 2020, 1.6)
my_car.display_info()  # –í–∏–≤–µ–¥–µ: 2020 Toyota Corolla


#–°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å Person, —â–æ –º—ñ—Å—Ç–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç–∏:
class Person:
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    # –ú–µ—Ç–æ–¥ –∫–ª–∞—Å—É
    def display_info(self):
        print(f"{self.name} {self.age} {self.job}")

    def is_adult(self):
        return self.age >= 18



person1 = Person("–ö—É–ª—î–±—è–∫–∞", 22, "ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä")
person2 = Person("–ê–ª—ñ–Ω–∞", 17, "Python Developer")
person3 = Person("–°–µ–º–µ–Ω", 35, "Data Scientist")
person4 = Person("–ú–∞—Ä–∫–æ", 15, "AI –Ü–Ω–∂–µ–Ω–µ—Ä")
# –î–æ–¥–∞–º–æ —ó—Ö —É —Å–ø–∏—Å–æ–∫
people = [person1, person2, person3, person4]

# –ü—Ä–æ–π–¥–µ–º–æ—Å—å –ø–æ —Å–ø–∏—Å–∫—É —Ç–∞ –≤–∏–≤–µ–¥–µ–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
for person in people:
    status = "‚úÖ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ–π" if person.is_adult() else "‚ùå –Ω–µ–ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ–π"
    print(f"{person.name} ({person.age} —Ä–æ–∫—ñ–≤): {status}")


#–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∞—Å Person:
class Person:
    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Job: {self.job}")

    def is_adult(self):
        return self.age >= 18

    def greet(self):
        print(f"–ü—Ä–∏–≤—ñ—Ç! –Ø {self.name}, –º–µ–Ω—ñ {self.age} —Ä–æ–∫—ñ–≤ —ñ —è –ø—Ä–∞—Ü—é—é —è–∫ {self.job}.")

    def change_job(self, new_job):
        old_job = self.job
        self.job = new_job
        print(f"{self.name} –∑–º—ñ–Ω–∏–≤(–ª–∞) —Ä–æ–±–æ—Ç—É: –∑ '{old_job}' –Ω–∞ '{self.job}'.")


person1 = Person("–ö—É–ª—î–±—è–∫–∞", 22, "ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä")
person2 = Person("–ê–ª—ñ–Ω–∞", 17, "Python Developer")
person3 = Person("–°–µ–º–µ–Ω", 35, "Data Scientist")
person4 = Person("–ú–∞—Ä–∫–æ", 15, "AI –Ü–Ω–∂–µ–Ω–µ—Ä")

# –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥–∏
person4.greet()
person4.change_job("AI Researcher")
person4.display_info()
print()



# –û–ù–û–í–õ–ï–ù–ò–ô–Æ –º–µ—Ç–æ–¥ birthday(), —Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Student(Person)
# —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—É –∑–º—ñ–Ω—É –ø—Ä–æ—Ñ–µ—Å—ñ—ó
# –ö–ª–∞—Å Person ‚Äî –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ª—é–¥–µ–π
class Person:
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä): –∑–∞–¥–∞—î–º–æ —ñ–º‚Äô—è, –≤—ñ–∫ —ñ —Ä–æ–±–æ—Ç—É
    def __init__(self, name, age, job):
        self.name = name          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å name
        self.age = age            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–∫ —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å age
        self.job = job            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–±–æ—Ç—É —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å job

    # –ú–µ—Ç–æ–¥, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—é–¥–∏–Ω—É
    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Job: {self.job}")

    # –ú–µ—Ç–æ–¥, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –ª—é–¥–∏–Ω–∞ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—è (18+)
    def is_adult(self):
        return self.age >= 18

    # –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ñ—Ç–∞–Ω–Ω—è
    def greet(self):
        print(f"–ü—Ä–∏–≤—ñ—Ç! –Ø {self.name}, –º–µ–Ω—ñ {self.age} —Ä–æ–∫—ñ–≤ —ñ —è –ø—Ä–∞—Ü—é—é —è–∫ {self.job}.")

    # –ú–µ—Ç–æ–¥ –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ñ–µ—Å—ñ—ó
    def change_job(self, new_job):
        old_job = self.job                     # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—É –ø—Ä–æ—Ñ–µ—Å—ñ—é
        self.job = new_job                     # –ó–º—ñ–Ω—é—î–º–æ –Ω–∞ –Ω–æ–≤—É
        print(f"{self.name} –∑–º—ñ–Ω–∏–≤(–ª–∞) —Ä–æ–±–æ—Ç—É: –∑ '{old_job}' –Ω–∞ '{self.job}'.")

        # –Ø–∫—â–æ –∑–º—ñ–Ω–∞ —Ä—ñ–∑–∫–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        if self.is_radical_change(old_job, new_job):
            print("‚ö†Ô∏è –¶–µ —Å–µ—Ä–π–æ–∑–Ω–∞ –∑–º—ñ–Ω–∞ –∫–∞—Ä'—î—Ä–∏!")

    # –ú–µ—Ç–æ–¥, —â–æ –¥–æ–¥–∞—î 1 –¥–æ –≤—ñ–∫—É (–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è)
    def birthday(self):
        self.age += 1
        print(f"üéâ –ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, {self.name}! –¢–æ–±—ñ —Ç–µ–ø–µ—Ä {self.age} —Ä–æ–∫–∏(—ñ–≤).")

    # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥, —â–æ –≤–∏–∑–Ω–∞—á–∞—î —Ä–∞–¥–∏–∫–∞–ª—å–Ω—É –∑–º—ñ–Ω—É –ø—Ä–æ—Ñ–µ—Å—ñ—ó
    def is_radical_change(self, old, new):
        # –¶–µ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä "–¥—É–∂–µ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ—Ñ–µ—Å—ñ–π"
        radical_pairs = [
            ("Data Scientist", "–§–ª–æ—Ä–∏—Å—Ç"),
            ("AI –Ü–Ω–∂–µ–Ω–µ—Ä", "–ü–µ–∫–∞—Ä"),
            ("Python Developer", "–ë–∞—Ä–º–µ–Ω"),
            ("ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä", "–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫")
        ]
        # –Ø–∫—â–æ —Å—Ç–∞—Ä–µ –π –Ω–æ–≤–µ –≤—Ö–æ–¥—è—Ç—å –¥–æ –ø–∞—Ä ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î True
        return (old, new) in radical_pairs or (new, old) in radical_pairs


# –ö–ª–∞—Å Student –Ω–∞—Å–ª—ñ–¥—É—î (—É—Å–ø–∞–¥–∫–æ–≤—É—î) –≤—Å–µ –≤—ñ–¥ –∫–ª–∞—Å—É Person
class Student(Person):
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç
    def __init__(self, name, age, job, university):
        super().__init__(name, age, job)     # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
        self.university = university         # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å: —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç

    # –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ display_info (–¥–æ–¥–∞—î–º–æ –≤–∏–≤—ñ–¥ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É)
    def display_info(self):
        super().display_info()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
        print(f"–ù–∞–≤—á–∞—î—Ç—å—Å—è –≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ: {self.university}")

    # –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ –º–µ—Ç–æ–¥ greet –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    def greet(self):
        print(f"–ü—Ä–∏–≤—ñ—Ç! –Ø —Å—Ç—É–¥–µ–Ω—Ç {self.name}, –º–µ–Ω—ñ {self.age} —Ä–æ–∫—ñ–≤, —è –≤—á—É—Å—è –≤ {self.university} —ñ –ø—Ä–∞—Ü—é—é —è–∫ {self.job}.")


# üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–°–¨–û–ì–û –ù–ê –ü–†–ê–ö–¢–ò–¶–Ü

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ö—É–ª—î–±—è–∫–∏
kul = Person("–ö—É–ª—î–±—è–∫–∞", 22, "ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä")
kul.greet()                     # –í–∏–≤–æ–¥–∏–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
kul.birthday()                 # –°–∏–º—É–ª—é—î–º–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
kul.change_job("–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫")   # –ó–º—ñ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—ó (—Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ!)
kul.display_info()             # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—é –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é

print("\n--- –°—Ç—É–¥–µ–Ω—Ç ---")  # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
s1 = Student("–ê–ª—ñ–Ω–∞", 19, "Python Developer", "–ö–ü–Ü")
s1.greet()             # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞
s1.display_info()      # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞

# üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –í–°–¨–û–ì–û –ù–ê –ü–†–ê–ö–¢–ò–¶–Ü

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ö—É–ª—î–±—è–∫–∏
kulebiaka = Person("–ö—É–ª—î–±—è–∫–∞", 22, "ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä")
kulebiaka.greet()                     # –í–∏–≤–æ–¥–∏–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
kulebiaka.birthday()                 # –°–∏–º—É–ª—é—î–º–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
kulebiaka.change_job("–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫")   # –ó–º—ñ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—ó (—Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ!)
kulebiaka.display_info()             # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—é –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é

print("\n--- –°—Ç—É–¥–µ–Ω—Ç ---")  # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∫–∏ –ê–ª—ñ–Ω–∏
alina = Student("–ê–ª—ñ–Ω–∞", 19, "Python Developer", "–ö–ü–Ü")
alina.greet()             # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∫–∏
alina.display_info()      # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∫—É

print("\n--- –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ ---")  # –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –°–µ–º–µ–Ω–∞
semen = Person("–°–µ–º–µ–Ω", 35, "–ë–∞—Ä–º–µ–Ω")
semen.greet()
semen.display_info()

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ú–∞—Ä–∫–∞
marko = Student("–ú–∞—Ä–∫–æ", 21, "–§–ª–æ—Ä–∏—Å—Ç", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –ø–æ–ª—ñ—Ç–µ—Ö–Ω—ñ–∫–∞")
marko.greet()
marko.display_info()
print("\n---------------\n---------------–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–¥-----\n>")




# –û–ù–û–í–õ–ï–ù–ò–ô –ö–û–î (–î–û–î–ê–¢–ö–ò –î–û –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û)
# –ö–ª–∞—Å Person ‚Äî –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ª—é–¥–µ–π
class Person:
    count = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ª—é–¥–µ–π

    def __init__(self, name, age, job):
        self.name = name
        self.age = age
        self.job = job
        self.friends = []  # –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑—ñ–≤
        Person.count += 1

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Job: {self.job}")

    def is_adult(self):
        return self.age >= 18

    def greet(self):
        print(f"–ü—Ä–∏–≤—ñ—Ç! –Ø {self.name}, –º–µ–Ω—ñ {self.age} —Ä–æ–∫—ñ–≤ —ñ —è –ø—Ä–∞—Ü—é—é —è–∫ {self.job}.")

    def change_job(self, new_job):
        old_job = self.job
        self.job = new_job
        print(f"{self.name} –∑–º—ñ–Ω–∏–≤(–ª–∞) —Ä–æ–±–æ—Ç—É: –∑ '{old_job}' –Ω–∞ '{self.job}'.")
        if self.is_radical_change(old_job, new_job):
            print("‚ö†Ô∏è –¶–µ —Å–µ—Ä–π–æ–∑–Ω–∞ –∑–º—ñ–Ω–∞ –∫–∞—Ä'—î—Ä–∏!")

    def birthday(self):
        self.age += 1
        print(f"üéâ –ó –î–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, {self.name}! –¢–æ–±—ñ —Ç–µ–ø–µ—Ä {self.age} —Ä–æ–∫—ñ–≤.")

    def is_radical_change(self, old, new):
        radical_pairs = [
            ("Data Scientist", "–§–ª–æ—Ä–∏—Å—Ç"),
            ("AI –Ü–Ω–∂–µ–Ω–µ—Ä", "–ü–µ–∫–∞—Ä"),
            ("Python Developer", "–ë–∞—Ä–º–µ–Ω"),
            ("ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä", "–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫")
        ]
        return (old, new) in radical_pairs or (new, old) in radical_pairs

    def years_to_retirement(self):
        pension_age = 60
        if self.age >= pension_age:
            print(f"{self.name} –≤–∂–µ –Ω–∞ –ø–µ–Ω—Å—ñ—ó.")
        else:
            years_left = pension_age - self.age
            print(f"{self.name} –¥–æ –ø–µ–Ω—Å—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—å {years_left} —Ä–æ–∫—ñ–≤.")

    def compare_age(self, other_person):
        if self.age > other_person.age:
            print(f"{self.name} —Å—Ç–∞—Ä—à–∏–π –∑–∞ {other_person.name}")
        elif self.age < other_person.age:
            print(f"{self.name} –º–æ–ª–æ–¥—à–∏–π –∑–∞ {other_person.name}")
        else:
            print(f"{self.name} —Ç–∞ {other_person.name} –æ–¥–Ω–æ–ª—ñ—Ç–∫–∏")

    def add_friend(self, friend):
        self.friends.append(friend)
        print(f"{self.name} –ø–æ–¥—Ä—É–∂–∏–≤—Å—è –∑ {friend.name}")


# –ö–ª–∞—Å Student —É—Å–ø–∞–¥–∫–æ–≤—É—î Person
class Student(Person):
    def __init__(self, name, age, job, university):
        super().__init__(name, age, job)
        self.university = university

    def display_info(self):
        super().display_info()
        print(f"–ù–∞–≤—á–∞—î—Ç—å—Å—è –≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ: {self.university}")

    def greet(self):
        print(f"–ü—Ä–∏–≤—ñ—Ç! –Ø —Å—Ç—É–¥–µ–Ω—Ç {self.name}, –º–µ–Ω—ñ {self.age} —Ä–æ–∫—ñ–≤, —è –≤—á—É—Å—è –≤ {self.university} —ñ –ø—Ä–∞—Ü—é—é —è–∫ {self.job}.")


# üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø

# –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ª—é–¥–µ–π
all_people = []

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç–∏
kul = Person("–ö—É–ª—î–±—è–∫–∞", 22, "ML —Ä–æ–∑—Ä–æ–±–Ω–∏–∫-–∞–º–∞—Ç–æ—Ä")
marko = Person("–ú–∞—Ä–∫–æ", 45, "AI –Ü–Ω–∂–µ–Ω–µ—Ä")
semen = Person("–°–µ–º–µ–Ω", 61, "–°–∞–¥—ñ–≤–Ω–∏–∫")
alina = Student("–ê–ª—ñ–Ω–∞", 19, "Python Developer", "–ö–ü–Ü")

# –î–æ–¥–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
all_people.extend([kul, marko, semen, alina])

# –î—ñ—ó –∑ –æ–±'—î–∫—Ç–∞–º–∏
kul.greet()
kul.birthday()
kul.change_job("–ú–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫")
kul.display_info()
kul.years_to_retirement()

print("\n--- –Ü–Ω—à—ñ ---")

marko.greet()
semen.greet()
alina.greet()

print("\n--- –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–∫—É ---")
kul.compare_age(alina)
kul.compare_age(semen)

print("\n--- –î—Ä—É–∂–±–∞ ---")
kul.add_friend(marko)
marko.add_friend(alina)

print("\n--- –í—Å—ñ –ª—é–¥–∏ ---")
for person in all_people:
    print("‚Äî" * 30)
    person.display_info()

print(f"\nüî¢ –ó–∞–≥–∞–ª–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª—é–¥–µ–π: {Person.count}")
